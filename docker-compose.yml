version: '3.8'

services:
  db:
    image: postgres:13
    container_name: db
    restart: unless-stopped
   # environment:
   #   POSTGRES_USER: postgres
   #   POSTGRES_PASSWORD: postgres
   #   POSTGRES_DB: postgres
    env_file:
      - ./backend/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mynetwork

  backend:
    build: ./backend
    container_name: backend
    restart: unless-stopped
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    networks:
      - mynetwork

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    restart: unless-stopped
    #env_file:
    #  - ./frontend/.env
    #ports:
    #  - "3000:80"
    environment:
      - VITE_API_URL=https://indiestephanchuks.twilightparadox.com
    networks:
      - mynetwork

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - frontend-build:/usr/share/nginx/html
      - /etc/letsencrypt:/etc/letsencrypt
    networks:
      - mynetwork

  adminer:
    image: adminer:latest
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
    networks:
      - mynetwork

  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: proxy-manager
    restart: unless-stopped
    ports:
      - "81:81"
      - "8090:8090"
      - "8443:8443"
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    #environment:
    #  - DISABLE_IPV6=false
    volumes:
      #- ./data:/data
      - nginx_data:/data
      #- ./nginx.conf:/etc/nginx/nginx.conf
      - letsencrypt:/etc/letsencrypt
    depends_on:
      - db
      - backend
      - frontend
      - adminer
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  postgres_data:
  frontend-build:
  nginx_data:
  letsencrypt:
